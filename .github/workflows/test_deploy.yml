name: test action

on:
  workflow_dispatch:
    inputs:
      beanstalk_env:
        description: Beanstalk Environment
        required: false
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Clone Repository'
        uses: actions/checkout@v2
      - name: Test input
        env:
          BEANSTALK: ${{ github.event.inputs.beanstalk_env }} 
          TEST: ${{ !contains(github.ref,'master') }}
        run: |
          echo "testing input: ${{ github.event.inputs.beanstalk_env }}"
          echo "print preset env $BEANSTALK"
          echo $GITHUB_REF
          echo "test $TEST"

      - name: Set environment to production
        if: ${{ contains(github.ref,'master') }}
        run: |
          echo "::set-env name=ENVIRONMENT::production"
      
      - name: Set enviroment to staging
        if: ${{ !contains(github.ref,'master') }}
        run: |
          echo "::set-env name=ENVIRONMENT::staging"

      - name: Create deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          environment: ${{ env.ENVIRONMENT }}
          production_environment: ${{ contains(github.ref,'master') }}
          owner: ${{ github.actor }}
          auto_merge: false
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
      - uses: avakar/set-deployment-status@v1
        with:
          state: in_progress
          deployment_id: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: deploy the pull request
        run: |
          # deployment logic goes here
          sleep 10
          # instead we randomly succeed or fail the deployment
          exit $(( $RANDOM % 10 >= 5 ))
      
      - uses: avakar/set-deployment-status@v1
        if: always()
        with:
          state: ${{ job.status }}
          deployment_id: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
