name: deliver deploy

on:
  workflow_dispatch:
    inputs:
      git_ref:
        description: Git Ref (Optional)
        required: false
      beanstalk_env:
        description: Beanstalk Environment
        required: false
        default: ${{ secrets.ENVIRONMENT_PRODUCTION_NAME }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Clone Repository (latest)'
        if: github.event.inputs.git_ref == ''
        uses: actions/checkout@v2
      - name: 'Clone Repository (custom ref)'
        if: github.event.inputs.git_ref != ''
        with:
          ref: ${{ github.event.inputs.git_ref }} 
        uses: actions/checkout@v2
      - name: Test input
        env:
          BEANSTALK: ${{ github.event.inputs.beanstalk_env }} 
        run: |
          echo "testing input: ${{ github.event.inputs.beanstalk_env }}"
          echo "print preset env $BEANSTALK"
          echo $GITHUB_REF

      - name: Create deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          environment: production
          auto_merge: false
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: set deployment status to in progress
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: dev
          environment_url: https://example.com
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: deploy the pull request
        run: |
          # deployment logic goes here
          sleep 10
          # instead we randomly succeed or fail the deployment
          exit $(( $RANDOM % 10 >= 5 ))
      
      - name: set deployment status to success
        id: successful_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: dev
          environment_url: https://example.com
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          mediaType: '{"previews": ["ant-man"]}'
          state: success
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: set deployment status to failure
        id: failed_deployment
        uses: octokit/request-action@v2.x
        if: failure()
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: dev
          environment_url: https://example.com
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          mediaType: '{"previews": ["ant-man"]}'
          state: failure
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
